core:
  drop_table: drop table if exists {table} cascade
  drop_view: drop view if exists {view}
  replace: insert into {table} ({fields}) values ({values}) on conflict ({pk_fields}) do update set {set_fields}
  replace_temp: |
    insert into {table} ({names})
    select {names} from {temp_table}
    on conflict ({pk_fields}) do nothing;
    update {table} as t1 set {set_fields2}
    from (select * from {temp_table}) as t2
    where {pk_fields_equal}
  insert_ignore: insert into {table} ({fields}) values ({values}) on conflict ({pk_fields}) do nothing
  insert_ignore_temp: insert into {table} ({names}) select {names} from {temp_table} on conflict ({pk_fields}) do nothing
  update_temp: |
    update {table} as t1 set {set_fields2}
    from (select * from {temp_table}) as t2
    where {pk_fields_equal2}
  sample: SELECT {fields} FROM {table} TABLESAMPLE SYSTEM (50) limit {n}
  rename_table: ALTER TABLE {table} RENAME TO {new_table}
  set_schema: ALTER TABLE {table} SET SCHEMA {new_schema}
  copy_from_s3: |
    COPY {tgt_table}
    FROM '{s3_path}'
    credentials 'aws_access_key_id={aws_access_key_id};aws_secret_access_key={aws_secret_access_key}'
    CSV delimiter ',' EMPTYASNULL BLANKSASNULL GZIP IGNOREHEADER 1 DATEFORMAT 'auto'
  copy_to_s3: |
    unload ('{sql}')   
    to '{s3_path}'
    credentials 'aws_access_key_id={aws_access_key_id};aws_secret_access_key={aws_secret_access_key}'
    HEADER gzip allowoverwrite CSV PARALLEL {parallel}
  alter_columns: |
    alter table {table} {col_ddls}
 
metadata:
    
  schemas: |
    select s.nspname as schema_name
    from pg_catalog.pg_namespace s
    where s.nspname not like 'pg_temp_%'
    order by s.nspname
    
  tables: |
    select table_name
    from information_schema.tables
    where table_type = 'BASE TABLE'
      and table_schema = '{schema}'
    order by table_name
    
  views: |
    select table_name
    from information_schema.tables
    where table_type = 'VIEW'
      and table_schema = '{schema}'
    order by table_name

  columns: |
    select column_name, data_type
    from information_schema.columns
    where table_schema = '{schema}'
      and table_name = '{table}'
    order by ordinal_position

  primary_keys: |
    select tco.constraint_name as pk_name,
           kcu.ordinal_position as position,
           kcu.column_name as column_name
    from information_schema.table_constraints tco
    join information_schema.key_column_usage kcu 
         on kcu.constraint_name = tco.constraint_name
         and kcu.constraint_schema = tco.constraint_schema
         and kcu.constraint_name = tco.constraint_name
    where kcu.table_schema = '{schema}'
      and kcu.table_name = '{table}'
    order by kcu.table_schema,
             kcu.table_name,
             position

  indexes: |
    select
      i.relname as index_name,
      a.attname as column_name
    from
      pg_class t,
      pg_class i,
      pg_index ix,
      pg_attribute a,
      pg_namespace n
    where
      t.oid = ix.indrelid
      and i.oid = ix.indexrelid
      and n.oid = i.relnamespace
      and a.attrelid = t.oid
      and a.attnum = ANY(ix.indkey)
      and n.nspname = '{schema}' and t.relname = '{table}'
    order by
      t.relname,
      i.relname     
  
  columns_full: |
    with tables as (
      select
        table_catalog,
        table_schema,
        table_name,
        case table_type
          when 'VIEW' then true
          else false
        end as is_view
      from information_schema.tables
      where table_schema = '{schema}' and table_name = '{table}'
    )
    select
      cols.table_schema as schema_name,
      cols.table_name as table_name,
      cols.column_name as column_name,
      cols.data_type as data_type,
      cols.ordinal_position as position
    from information_schema.columns cols
    join tables
      on tables.table_catalog = cols.table_catalog
      and tables.table_schema = cols.table_schema
      and tables.table_name = cols.table_name
    order by cols.table_catalog, cols.table_schema, cols.table_name, cols.ordinal_position

  schemata: |
    with tables as (
      select
        table_catalog,
        table_schema,
        table_name,
        case table_type
          when 'VIEW' then true
          else false
        end as is_view
      from information_schema.tables
      where table_schema = '{schema}'
    )
    select
      cols.table_schema as schema_name,
      cols.table_name as table_name,
      tables.is_view as is_view,
      cols.column_name as column_name,
      cols.data_type as data_type,
      cols.ordinal_position as position
    from information_schema.columns cols
    join tables
      on tables.table_catalog = cols.table_catalog
      and tables.table_schema = cols.table_schema
      and tables.table_name = cols.table_name
    order by cols.table_catalog, cols.table_schema, cols.table_name, cols.ordinal_position
  
  ddl_table: "
    with tabledefinition as (
      SELECT 
        n.nspname, c.relname, a.attname AS column_name,
        pg_catalog.format_type(a.atttypid, a.atttypmod) as type,
        case 
          when a.attnotnull
        then 'NOT NULL' 
        else 'NULL' 
        END as not_null 
      FROM pg_class c,
      pg_attribute a,
      pg_type t,
      pg_namespace n
      WHERE  n.nspname = '{schema}' and c.relname = '{table}'
      AND a.attnum > 0
      AND a.attrelid = c.oid
      AND a.atttypid = t.oid
      and  n.oid = c.relnamespace
    ORDER BY a.attnum
    )
    , table_ddl as (
        SELECT                                          
          'CREATE TABLE ' || nspname || '.' || relname || E'\n(\n' ||
          array_to_string(
            array_agg(
              '    \"' || column_name || '\" ' ||  type || ' '|| not_null
            )
            , E',\n'
          ) || E'\n)' as ddl
        from tabledefinition
        group by nspname, relname
    )
    select
      table_ddl.ddl as ddl
    from table_ddl
    "
  ddl_view: |
    SELECT pg_get_viewdef(to_regclass('{schema}.{table}'))::text as ddl

analysis:
  field_chars: |
    select
      '{schema}' as schema_nm,
      '{table}' as table_nm,
      '{field}' as field, sum(case when {field}::text ~ '\n' then 1 else 0 end) as cnt_nline, 
      sum(case when {field}::text ~ '\t' then 1 else 0 end) as cnt_tab, 
      sum(case when {field}::text ~ ',' then 1 else 0 end) as cnt_comma, 
      sum(case when {field}::text ~ '"' then 1 else 0 end) as cnt_dquote, 
      min(length({field}::text)) as f_min_len, 
      max(length({field}::text)) as f_max_len
    from {schema}.{table}

  field_stat_len: |
    -- field_stat_len {table}
    select
      '{schema}' as schema_nm,
      '{table}' as table_nm,
      '{field}' as field,
      count(*) as tot_cnt,
      min(length({field}::text)) as f_min_len,
      max(length({field}::text)) as f_max_len
    from {schema}.{table}
  
  field_stat_deep: |
    select
      '{schema}' as schema_nm,
      '{table}' as table_nm,
      '{field}' as field,
      count(*) as tot_cnt,
      count({field}) as f_cnt,
      count(*) - count({field}) as f_null_cnt,
      round(100.0 * (count(*) - count({field})) / count(*),1) as f_null_prct,
      count(distinct {field}) as f_dstct_cnt,
      round(100.0 * count(distinct {field}) / count(*),1) as f_dstct_prct,
      count(*) - count(distinct {field}) as f_dup_cnt,
      min({field})::text as f_min,
      max({field})::text as f_max,
      min(length({field}::text)) as f_min_len,
      max(length({field}::text)) as f_max_len
    from {schema}.{table}

  distro_field: |
    with t1 as (
      select
        '{field}'::text as field,
        {field},
        count(1) cnt
      from {schema}.{table}
      group by {field}
      order by count(1) desc
    )
    , t2 as (
      select
        '{field}'::text as field,
        count(1) ttl_cnt
      from {schema}.{table}
    )
    select
      '{table}' as table_nm,
      t1.field,
      {field} as value,
      cnt,
      round(100.0 * cnt / ttl_cnt, 2) as prct
    from t1
    join t2
      on t1.field = t2.field
    order by cnt desc

  distro_field_group: |
    with t1 as (
      select
        '{field}'::text as field,
        {group_expr} as group_exp,
        {field},        
        count(1) cnt
      from {schema}.{table}
      group by {field}, {group_expr}
      order by count(1) desc
    )
    , t2 as (
      select
        '{field}'::text as field,
        count(1) ttl_cnt
      from {schema}.{table}
    )
    select
      '{table}' as table_nm,
      t1.field,
      t1.group_exp,
      {field} as value,
      cnt,
      round(100.0 * cnt / ttl_cnt, 2) as prct
    from t1
    join t2
      on t1.field = t2.field
    order by cnt desc

  distro_field_date: |
    with t1 as (
        select
          '{field}'::text as field,
          extract(year from {field}) as year,
          extract(month from {field}) as month,
          count(1) cnt
        from {schema}.{table}
        group by extract(year from {field}), extract(month from {field})
        order by extract(year from {field}), extract(month from {field})
      )
      , t2 as (
        select '{field}'::text as field, count(1) ttl_cnt
        from {schema}.{table}
      )
      select 
        '{schema}' as schema_nm,
        '{table}' as table_nm,
        t1.field,
        t1.year,
        t1.month,
        cnt,
        round(100.0 * cnt / ttl_cnt, 2) as prct
      from t1
      join t2
        on t1.field = t2.field
      order by t1.year, t1.month

function:
  truncate_f: trunc({field})
  truncate_datef: trunc({field})
  date_to_int: trunc(extract(epoch from {field})/(60*60*24))::int
  number_to_int: round({field}, 0)
  checksum_datetime: date_part('epoch', {field})
