core:
  drop_table: drop table if exists {table}
  drop_view: drop view if exists {view}
  create_table: create table if not exists {table} ({col_types})
  replace: replace into {table} ({names}) values({values})
  truncate_table: delete from {table}
  insert_option: ""


metadata:

  schemas: |
    select 'main' as schema_name
  
  tables: |
    select name as table_name
    from sqlite_master
    where type='table'

  views: |
    select name as table_name
    from sqlite_master
    where type='view'

  columns: |
    select name as column_name, type as data_type
    from pragma_table_info('{table}')

  primary_keys: |
    select 
      null as pk_name,
      pk as position,
      name as column_name
    from pragma_table_info('{table}')
    where pk > 0 
  
  indexes: |
    SELECT DISTINCT
      sm.name as table_name,
      ii.name as column_name,
      ii.*
    FROM sqlite_master AS sm,
        pragma_index_list(sm.name) AS il,
        pragma_index_info(il.name) AS ii
    WHERE sm.type='table'
      and sm.name='{table}'
    ORDER BY 1;

  columns_full: |
    select
      '{schema}' as schema_name,
      '{table}' as table_name,
      pti.name as column_name,
      pti.type as data_type,
      pti.cid + 1 as position
    from pragma_table_info('{table}') pti
    order by pti.cid
  
  schemata: |
    select
      '{schema}' as schema_name,
      sm.name as table_name,
      case
        when sm2.type = 'view'
          then true
        else false
      end as is_view,
      pti.name as column_name,
      pti.type as data_type,
      pti.cid + 1 as position
    from sqlite_master AS sm, pragma_table_info(sm.name) pti
    left join sqlite_master as sm2
      on sm2.name = sm.name
      and sm2.type = 'view'
    order by sm.name, pti.cid
  
  ddl_table: |
    select sql from sqlite_master
    where name = '{table}' and type in ('table')
  
  ddl_view: |
    select sql from sqlite_master
    where name = '{table}' and type in ('view')

analysis:
  chars: |
    select
      '{schema}' as schema_nm,
      '{table}' as table_nm,
      '{field}' as field, sum(case when {field}::text ~ '\n' then 1 else 0 end) as cnt_nline, 
      sum(case when {field}::text ~ '\t' then 1 else 0 end) as cnt_tab, 
      sum(case when {field}::text ~ ',' then 1 else 0 end) as cnt_comma, 
      sum(case when {field}::text ~ '"' then 1 else 0 end) as cnt_dquote, 
      min(length({field}::text)) as f_min_len, 
      max(length({field}::text)) as f_max_len
    from {schema}.{table}

  fields: |
  fields_deep: |
  fields_distro: |
  fields_distro_group: |
  fields_date_distro: |
  fields_date_distro_wide: |
  fields_group: |

function:
  sleep: select sqlite3_sleep({seconds}*1000)
  checksum_datetime: CAST(strftime('%s', {field}) as integer)

variable:
  bind_string: ${c}
  batch_rows: 50
  batch_values: 1000
